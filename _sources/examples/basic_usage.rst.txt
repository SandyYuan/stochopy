.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_basic_usage.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_examples_basic_usage.py:


Minimize a function
===================

This examples shows a basic usage of :func:`stochopy.optimize.minimize`.

Let's import an objective function to optimize. :mod:`stochopy.factory` has several sample benchmark functions to test.
We also have to define the feasible space (or boundaries) for each variable to optimize. The length of the boundary array is used internally to define the dimensionality of the problem. In this example, we will optimize 20 variables within [-5.12, 5.12].


.. code-block:: default


    import numpy
    from stochopy.factory import rosenbrock

    upper = numpy.full(20, 5.12)
    bounds = numpy.column_stack((-upper, upper))








The main optimization function :func:`stochopy.optimize.minimize` has an API inspired by :mod:`scipy`.
In this example, we will use CMA-ES to minimize the Rosenbrock function 


.. code-block:: default


    from stochopy.optimize import minimize

    x = minimize(rosenbrock, bounds, method="cmaes", options={"maxiter": 2000, "popsize": 20, "seed": 42})








:func:`stochopy.optimize.minimize` returns a :class:`stochopy.optimize.OptimizeResult` dictionary-like that contains the optimization result.


.. code-block:: default


    print(x)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

         fun: 9.203473197702412e-09
     message: 'best solution value is lower than ftol'
        nfev: 24060
         nit: 1203
      status: 1
     success: True
           x: array([0.99999851, 1.00000153, 1.00000235, 1.00000107, 1.00000165,
           1.00000115, 1.00000126, 1.00000194, 1.00000171, 1.00000051,
           1.00000124, 1.00000074, 0.99999969, 1.00000128, 1.00000196,
           1.00000224, 1.00000511, 1.0000109 , 1.00002582, 1.00005159])





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.038 seconds)


.. _sphx_glr_download_examples_basic_usage.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: basic_usage.py <basic_usage.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: basic_usage.ipynb <basic_usage.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
